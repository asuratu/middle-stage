// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userclient

import (
	"context"

	"middle/app/user/rpc/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddUserReq         = user.AddUserReq
	AddUserResp        = user.AddUserResp
	DelUserReq         = user.DelUserReq
	DelUserResp        = user.DelUserResp
	GetUserByIdReq     = user.GetUserByIdReq
	GetUserByMobileReq = user.GetUserByMobileReq
	GetUserResp        = user.GetUserResp
	SearchUserReq      = user.SearchUserReq
	SearchUserResp     = user.SearchUserResp
	UpdateUserReq      = user.UpdateUserReq
	UpdateUserResp     = user.UpdateUserResp
	User               = user.User

	User interface {
		// -----------------------用户表-----------------------
		AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error)
		UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
		DelUser(ctx context.Context, in *DelUserReq, opts ...grpc.CallOption) (*DelUserResp, error)
		GetUserById(ctx context.Context, in *GetUserByIdReq, opts ...grpc.CallOption) (*GetUserResp, error)
		GetUserByMobile(ctx context.Context, in *GetUserByIdReq, opts ...grpc.CallOption) (*GetUserResp, error)
		SearchUser(ctx context.Context, in *SearchUserReq, opts ...grpc.CallOption) (*SearchUserResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

// -----------------------用户表-----------------------
func (m *defaultUser) AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.AddUser(ctx, in, opts...)
}

func (m *defaultUser) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UpdateUser(ctx, in, opts...)
}

func (m *defaultUser) DelUser(ctx context.Context, in *DelUserReq, opts ...grpc.CallOption) (*DelUserResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.DelUser(ctx, in, opts...)
}

func (m *defaultUser) GetUserById(ctx context.Context, in *GetUserByIdReq, opts ...grpc.CallOption) (*GetUserResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUserById(ctx, in, opts...)
}

func (m *defaultUser) GetUserByMobile(ctx context.Context, in *GetUserByIdReq, opts ...grpc.CallOption) (*GetUserResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUserByMobile(ctx, in, opts...)
}

func (m *defaultUser) SearchUser(ctx context.Context, in *SearchUserReq, opts ...grpc.CallOption) (*SearchUserResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.SearchUser(ctx, in, opts...)
}
